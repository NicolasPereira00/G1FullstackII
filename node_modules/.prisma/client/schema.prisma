generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]

  @@map("brands")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]

  @@map("categories")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  slug        String? @unique
  description String?
  price       Decimal
  brandId     Int
  categoryId  Int
  sellerId    Int?
  gender      String?
  modelCode   String?
  material    String?
  isActive    Boolean @default(true)

  brand      Brand            @relation(fields: [brandId], references: [id])
  category   Category         @relation(fields: [categoryId], references: [id])
  seller     User?            @relation(fields: [sellerId], references: [id])
  variants   ProductVariant[]
  images     ProductImage[]
  orderItems OrderItem[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  CartItem   CartItem[]

  @@index([name])
  @@index([brandId])
  @@index([categoryId])
  @@index([sellerId])
  @@map("products")
}

model ProductVariant {
  id         Int            @id @default(autoincrement())
  productId  Int
  size       String
  color      String
  sku        String         @unique
  ean        String?        @unique
  stock      Int            @default(0)
  price      Decimal?
  product    Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  images     VariantImage[]
  CartItem   CartItem[]

  @@unique([productId, size, color])
  @@map("product_variants")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  url       String
  isPrimary Boolean @default(false)
  sortOrder Int     @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, sortOrder])
  @@map("product_images")
}

model VariantImage {
  id        Int     @id @default(autoincrement())
  variantId Int
  url       String
  isPrimary Boolean @default(false)
  sortOrder Int     @default(0)

  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([variantId, sortOrder])
  @@map("variant_images")
}

model Customer {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  phone     String?
  addresses Address[]
  orders    Order[]
  users     User[]
  carts     Cart[]

  @@map("customers")
}

model Address {
  id         Int      @id @default(autoincrement())
  customerId Int
  street     String
  number     String?
  complement String?
  district   String?
  city       String
  state      String
  zipCode    String
  customer   Customer @relation(fields: [customerId], references: [id])
  ordersShip Order[]  @relation("OrderShippingAddress")

  @@map("addresses")
}

model Order {
  id                Int      @id @default(autoincrement())
  customerId        Int
  shippingAddressId Int
  status            String   @default("PENDING")
  total             Decimal
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  customer        Customer    @relation(fields: [customerId], references: [id])
  shippingAddress Address     @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  variantId Int?
  quantity  Int
  unitPrice Decimal

  order   Order           @relation(fields: [orderId], references: [id])
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model Cart {
  id         Int      @id @default(autoincrement())
  customerId Int
  status     String   @default("ACTIVE")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer   @relation(fields: [customerId], references: [id])
  items    CartItem[]

  @@index([customerId, status])
  @@map("carts")
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  variantId Int?
  quantity  Int     @default(1)
  unitPrice Decimal

  cart    Cart            @relation(fields: [cartId], references: [id])
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([cartId])
  @@index([productId])
  @@map("cart_items")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String?
  email        String    @unique
  passwordHash String
  role         String    @default("CUSTOMER") // ADMIN | SELLER | CUSTOMER
  customerId   Int?
  customer     Customer? @relation(fields: [customerId], references: [id])

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}
